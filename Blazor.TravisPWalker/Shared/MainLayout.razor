@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider authStateProvider
@inject IConfiguration _configuration
@inject NavigationManager navManager

<PageTitle>Blazor.TravisPWalker</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>        
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <NavLink class="nav-link" href="#">
                        <span aria-hidden="true"></span> Hello, @context.User?.Identity?.Name
                    </NavLink>
                    <NavLink class="nav-link" href="logout">
                        <span aria-hidden="true"></span> Logout
                    </NavLink>
                </Authorized>
                <NotAuthorized>
                    <NavLink class="nav-link" href="login">
                        <span aria-hidden="true"></span> Login
                    </NavLink>
                </NotAuthorized>
            </AuthorizeView>


        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    //https://www.syncfusion.com/faq/blazor/general/how-do-i-access-browser-local-storage-in-blazor
    public string? Token;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationState;
            var blzrAuthStateProvider = (BlzrAuthStateProvider)authStateProvider;
            TokenViewModel tvm = await blzrAuthStateProvider.GetUserSessionAsync();

            ////await localStorage.SetItemAsync("ID", "20019");
            ////await localStorage.SetItemAsync("Name", "John Smith");
            //Token = await localStorage.GetItemAsync<string>("token");
            //if (Token != null && tvm.accessToken == null)
            //{
            //    UserCookieViewModel? userCookie = JsonSerializer.Deserialize<UserCookieViewModel>(Token);

            //    string blazorUrl = _configuration.GetValue<string>("URLS:blazor");
            //    UserToken userToken = new UserToken() { AccessToken = userCookie?.AccessToken, RefreshToken = userCookie?.RefreshToken, Audience = blazorUrl };

            //    HttpClient client = new HttpClient();

            //    string apiUrl = _configuration.GetValue<string>("URLS:api");
            //    string usermodel = JsonSerializer.Serialize(userToken);
            //    byte[] messageBytes = System.Text.Encoding.UTF8.GetBytes(usermodel);
            //    var content = new ByteArrayContent(messageBytes);
            //    content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            //    var response = client.PostAsync($"{apiUrl}/api/Authenticate/refresh-token", content).Result;
            //    string result;
            //    if (response.IsSuccessStatusCode)
            //    {
            //        result = response.Content.ReadAsStringAsync().Result;
            //        TokenViewModel? token = JsonSerializer.Deserialize<TokenViewModel>(result);
            //        if (token != null)
            //        {
            //            if (userCookie == null) { userCookie = new UserCookieViewModel(); }
            //            userCookie.AccessToken = token.accessToken;
            //            userCookie.RefreshToken = token.refreshToken;
            //            userCookie.expires = token.refreshTokenExpiryTime.ToString();

            //            await blzrAuthStateProvider.UpdateAuthenticationState(token);
            //            //navManager.NavigateTo("/", true);
            //        }
            //    }
            //}
        }
        
    }
}