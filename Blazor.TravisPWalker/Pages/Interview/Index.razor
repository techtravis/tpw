@page "/Interview"
@using Blazor.TravisPWalker.Authentication
@using System.Text.Json
@using Library.Database.Auth
@using Library.Database.Auth.Models
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IConfiguration _configuration
@inject ITokenService _tokenService
@inject IJSRuntime jsRuntime
<h3>Interview Questions</h3>

<AuthorizeView>
    <Authorized>
        @if (loadingQuestion)
        {
            <div class="container h-100">
                <div class="d-flex justify-content-md-center align-items-center vh-100">
                    <img src="images/Loading_2.gif" />
                </div>
            </div>
        }
        else
        {
            <div class="wrapper wrapper-content">
                <div class="row">
                    <div class="col-lg-12" style="max-width:900px;">
                        <div class="ibox collapsed border-bottom">
                            <div class="ibox-title">
                                <h5><strong>@((MarkupString)@question.Question)</strong></h5>
                                <div class="ibox-tools">
                                    <a class="collapse-link">
                                        <i class="fa fa-chevron-up"></i>
                                    </a>
                                </div>
                            </div>
                            <div class="ibox-content" style="display: none;">
                                @((MarkupString)@question.Answer)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-1">
                        <div class="mb-3 d-grid gap-2">
                            <button @onclick="GetQuestion" class="btn btn-primary">Next Question</button>
                        </div>
                    </div>                    
                </div>                
            </div>
        }        
    </Authorized>
    <NotAuthorized>
        <div class="row">
            You do not have permission to view this data
        </div>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="God">
    <Authorized>
        <div class="row">
            <NavLink class="nav-link" href="Interview/Manage">
                Manage Questions
            </NavLink>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private InterviewPrepQuestion question = new InterviewPrepQuestion();
    private bool loadingQuestion = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await GetQuestion();   
        }
        
        base.OnAfterRender(firstRender);
    }

    protected async Task GetQuestion()
    {
        loadingQuestion = true;
        this.StateHasChanged();
        await Task.Delay(100);

        var blzrAuthStateProvider = (BlzrAuthStateProvider)authStateProvider;
        TokenViewModel tvm = await blzrAuthStateProvider.GetUserSessionAsync();
        string apiUrl = _configuration.GetValue<string>("URLS:api");
        string blazorUrl = _configuration.GetValue<string>("URLS:blazor");
        UserToken userToken = new UserToken() { AccessToken = tvm.accessToken, RefreshToken = tvm.refreshToken, Audience = blazorUrl };

        TokenViewModel? apiTvm = _tokenService.GetTokenForAudience(tvm.accessToken, tvm.refreshToken, apiUrl);
        if (apiTvm != null)
        {
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiTvm.accessToken);
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //GET Method
            HttpResponseMessage response = await client.GetAsync($"{apiUrl}/api/Interview/getrandomquestion");
            if (response.IsSuccessStatusCode)
            {
                question = await response.Content.ReadFromJsonAsync<InterviewPrepQuestion>();
            }
            else
            {
                Console.WriteLine("Internal server Error");
            }


            loadingQuestion = false;
            this.StateHasChanged();
            await Task.Delay(100);
        }
        await jsRuntime.InvokeVoidAsync("collapseLinkOnClick");
    }

}
