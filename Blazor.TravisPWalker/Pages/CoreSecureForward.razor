@page "/coresecured"
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IConfiguration _configuration
@inject IJSRuntime js

<div class="container h-100">
    <div class="d-flex justify-content-md-center align-items-center vh-100">
        <img src="images/Loading_2.gif" />
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationState;
            if (authState.User.Identity?.Name != null)
            {
                var blzrAuthStateProvider = (BlzrAuthStateProvider)authStateProvider;
                TokenViewModel tvm = await blzrAuthStateProvider.GetUserSessionAsync();
                string coreUrl = _configuration.GetValue<string>("URLS:core");
                UserToken userToken = new UserToken() { AccessToken = tvm.accessToken, RefreshToken = tvm.refreshToken, Audience = coreUrl };

                HttpClient client = new HttpClient();

                string apiUrl = _configuration.GetValue<string>("URLS:api");
                string usermodel = JsonSerializer.Serialize(userToken);
                byte[] messageBytes = System.Text.Encoding.UTF8.GetBytes(usermodel);
                var content = new ByteArrayContent(messageBytes);
                content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                var response = client.PostAsync($"{apiUrl}/api/Authenticate/newtoken", content).Result;
                string result = "";
                if (response.IsSuccessStatusCode)
                {
                    result = response.Content.ReadAsStringAsync().Result;
                }

                // we do not want to await this as we want the page to navigate away.
                js.InvokeAsync<object>("open", $"{coreUrl}/Account/TokenAccess?token={result}&redirectURL=", "_core");
                navManager.NavigateTo($"/", true);
            }
        }
        return base.OnAfterRenderAsync(firstRender);



    }

}
