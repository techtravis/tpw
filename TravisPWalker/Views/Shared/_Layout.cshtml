@using Library.Database.Auth.Models;
@using Microsoft.AspNetCore.Identity;
@using Library.Database.Auth;
@using System.Text;
@using System.Text.Json;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject Library.Database.Auth.ITokenService _tokenService;
@inject IConfiguration _configuration
@inject SignInManager<Library.Database.Auth.SecureUser> SignInManager
@inject UserManagerExtension UserManager

@{
    // I recognize this is a hack.. and once I figure out a better way to replace it I will.
    // Basically if we have a token is within 15 minutes of expiring. We will refresh it so it does not expire
    // I have tokens set to a 30 minute timeout window

    // see if we have a valid session and User
    string? refreshToken = _httpContextAccessor.HttpContext?.Session?.GetString("RefreshToken");
    string? exp = User.Claims.Where(c => c.Type == "exp").SingleOrDefault()?.Value;
    int tokenEpoch;
    int.TryParse(exp, out tokenEpoch);
    tokenEpoch = tokenEpoch - 900;

    TimeSpan t = DateTime.UtcNow - new DateTime(1970, 1, 1);
    int currentEpoch = (int)t.TotalSeconds;

    var cookie = _httpContextAccessor.HttpContext?.Request.Cookies["token"];
    if ((tokenEpoch > 0 && currentEpoch > tokenEpoch && !String.IsNullOrEmpty(refreshToken)) || (String.IsNullOrEmpty(refreshToken) && cookie != null))
    {
        // need to try to refresh the token!
        // if the session token is empty lets grab it from the cookie if it exists.
        UserToken tokenModel = new UserToken();
        if(String.IsNullOrEmpty(refreshToken) && cookie != null)
        {
            UserCookieViewModel? userCookie = JsonSerializer.Deserialize<UserCookieViewModel>(cookie);
            tokenModel.AccessToken = userCookie?.AccessToken;
            tokenModel.RefreshToken = userCookie?.RefreshToken;
        }
        else
        {
            tokenModel.AccessToken = _httpContextAccessor.HttpContext?.Session?.GetString("AccessToken");
            tokenModel.RefreshToken = _httpContextAccessor.HttpContext?.Session?.GetString("RefreshToken");            
        }
        tokenModel.Audience = _configuration.GetValue<string>("JWT:Audience");

        if (tokenModel.AccessToken != null && tokenModel.RefreshToken != null)
        {
            HttpClient client = new HttpClient();

            string apiUrl = _configuration.GetValue<string>("URLS:api");
            string model = JsonSerializer.Serialize(tokenModel);
            byte[] messageBytes = System.Text.Encoding.UTF8.GetBytes(model);
            var content = new ByteArrayContent(messageBytes);
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = client.PostAsync($"{apiUrl}/api/Authenticate/refresh-token", content).Result;
            string result;
            if (response.IsSuccessStatusCode)
            {
                result = response.Content.ReadAsStringAsync().Result;
                TokenViewModel? token = JsonSerializer.Deserialize<TokenViewModel>(result);
                if (token != null)
                {
                    _httpContextAccessor.HttpContext?.Session.Set("AccessToken", Encoding.ASCII.GetBytes(token.accessToken));
                    _httpContextAccessor.HttpContext?.Session.Set("RefreshToken", Encoding.ASCII.GetBytes(token.refreshToken));
                    _httpContextAccessor.HttpContext?.Session.Set("RefreshTokenExpiryTime", Encoding.ASCII.GetBytes(token.expiration));

                    if(cookie != null)
                    {
                        UserCookieViewModel userCookie = new UserCookieViewModel()
                                {
                                    AccessToken = token.accessToken,
                                    RefreshToken = token.refreshToken,
                                    expires = token.expiration
                                };
                        var cookieOptions = new CookieOptions();
                        cookieOptions.Expires = DateTime.Now.AddDays(1).AddMinutes(5);
                        _httpContextAccessor.HttpContext?.Response.Cookies.Append("token", JsonSerializer.Serialize<UserCookieViewModel>(userCookie), cookieOptions);
                    }

                    // if the identity is null lets reload the page they were on to refresh the auth state to be able to show the user
                    if(User.Identity.Name == null)
                    {
                        string url = _httpContextAccessor.HttpContext?.Request.Path;
                        _httpContextAccessor.HttpContext?.Response.Redirect($"{url}");
                    }
                }
            }
        }
    }
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TravisPWalker.styles.css" asp-append-version="true" />

</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Code Samples</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Secured">Secured</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" target="_blazor" asp-area="" asp-controller="Home" asp-action="BlazorSite">Blazor Secured FetchData</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" target="_swagger" text-dark" asp-area="" asp-controller="Home" asp-action="Swagger">Swagger</a>
                        </li>
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2022 - Travis Walker - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    
    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
